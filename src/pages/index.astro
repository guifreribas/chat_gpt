---
import Layout from "../layouts/Layout.astro";
---

<Layout title='Free Chat GPT'>
	<main class='w-[800px] mx-auto max-w-full h-full max-h-[calc(100%-140px)] flex flex-col gap-4 rounded-md mb-8 px-2'>
		<h1 class='text-white text-center text-2xl font-bold'>
			Bienvenido/a a <span class='text-gradient'>Free Chat GPT</span>
		</h1>

		<ul class="w-full h-full flex flex-col justify-start items-start overflow-y-auto bg-gray-300 rounded-md p-4 shadow-sm shadow-white">
			<li class="loading">
				<i></i>
				<h4>Cargando...</h4>
				<h5>Esto puede tardar un poco... Ten paciencia</h5>
			</li>
		</ul>
	</main>

	<form
		class='w-[800px] mx-auto max-w-full h-fit flex flex-row gap-4 rounded-md px-2'
	>
		<input placeholder='Escribe tu mensaje aquí...' class="w-full rounded-md p-2 text-black bg-gray-100 focus:outline-none px-4 shadow-sm shadow-white" />
		<button type="submit" disabled class="px-4 py-2 bg-blue-600 text-white rounded-md shadow-sm shadow-white hover:bg-blue-500 hover:shadow-none">Enviar</button>
	</form>

	<small>&nbsp;</small>

	<template id='message-template'>
		<li class='w-full flex flex-col gap-2 rounded-md p-4'>
			<span class="flex justify-center items-center text-lg font-bold rounded-full w-12 h-12"></span>
			<p class="flex justify-center items-center rounded-md py-1.5 px-5"></p>
		</li>
	</template>
</Layout>





<script is:inline type="module">
	import { CreateWebWorkerMLCEngine } from "https://cdn.jsdelivr.net/npm/@mlc-ai/web-llm@0.2.46/+esm";

	(async() => {
		try {
			const gptClass = ['bg-blue-400', 'self-start'];
			const userClass = [ 'bg-green-400', 'self-end'];

			const $ = (element) => document.querySelector(element);

			const $messageTemplate = $('#message-template');
			const $messages = $('ul');
			const $input = $('input');
			const $form = $('form');
			const $sendButton = $('button');
			const $container = $('main');
			const $info = $('small');
			const $i = $('i');
			const $loading = $('.loading');

			let messages = [];
			let end = false;

			const SELECTED_MODEL = 'Llama-3-8B-Instruct-q4f32_1-MLC-1k';

			const engine = await CreateWebWorkerMLCEngine(
			  new Worker("src/utils/worker.js", { type: 'module' }),
			  SELECTED_MODEL,
			  {
			    initProgressCallback: (info) => {
					$info.textContent = info.text;
					$i.textContent = info.text;
					if (info.progress === 1 && !end) {
						end = true
						$loading?.parentNode?.removeChild($loading)
						$sendButton.removeAttribute('disabled')
						addMessage("¡Hola! Soy un ChatGPT que se ejecuta completamente en tu navegador. ¿En qué puedo ayudarte hoy?", 'bot')
						$input.focus()
					}
			    }
			  }
			)

			$form.addEventListener('submit', async (e) => {
				e.preventDefault();
				og('submit');
				const messageText = $input.value;

				if(messageText.length === 0) return;
				$input.value = '';

				addMessage(messageText, 'Tú');

				$sendButton.setAttribute('disabled', '');

				const userMessage = {
					role: 'user',
					content: messageText
				};

				messages.push(userMessage);

				const chunks = await engine.chat.completions.create({
					messages,
					stream: true
				});

				let reply = '';

				const $botMessage = addMessage("", 'bot');

				for await (const chunk of chunks) {
					const choice = chunk.choices[0];
					const content = choice?.delta?.content ?? "";
					reply += content;
					$botMessage.innerHTML += content;
				}

				$sendButton.removeAttribute('disabled');

				messages.push({
					role: 'assistant',
					content: reply
				});

				$container.scrollTop = $container.scrollHeight;

			});


			function addMessage(text, sender) {
				const clonedTemplate = $messageTemplate.content.cloneNode(true);
				const $newMessage = clonedTemplate.querySelector('li');

				const $who = $newMessage.querySelector('span');
				const $text = $newMessage.querySelector('p');

				const isBotSender = sender === 'bot';
				const classList =  isBotSender ? [...gptClass] : [...userClass];

				$who.textContent = isBotSender ? 'GPT' : 'Tú';
				$who.classList.add(...classList);
				$text.textContent = text;
				$text.classList.add(...classList);

				$messages.appendChild($newMessage);
				$messages.scrollTop = $messages.scrollHeight;

				return $text;
			}

		} catch (error) {
			console.error(error);
		}
})();

</script>