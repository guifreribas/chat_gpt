---
import Layout from "../layouts/Layout.astro";
---

<Layout title='Free Chat GPT'>
	<main class='w-[800px] mx-auto max-w-full h-full max-h-[calc(100%-140px)] flex flex-col gap-4 rounded-md mb-8 px-2 animate-fade-in'>
		<header>

		<h1 class='text-white text-center text-2xl font-bold'>
			CHAT GPT
		</h1>
		<p class="text-gray-300 text-center text-sm">
			Gratis, privado y se ejecuta en tu navegador!
		</p>
		</header>

		<ul class="w-full h-full flex flex-col justify-start items-start overflow-y-auto bg-gray-300 rounded-md p-4 shadow-sm shadow-white">
			<li class="loading w-full h-full flex flex-col justify-center items-center">
				<i class="w-full mx-auto text-sm text-gray-600 rounded-md p-2 text-center"></i>
				<h4 class="text-md font-bold">Estoy cargando el modelo...</h4>
				<h5 class="text-gray-700 font-medium text-sm">Esto puede tardar un poco...</h5>
			</li>
		</ul>
	</main>

	<form
		class='w-[800px] mx-auto max-w-full h-fit flex flex-row gap-4 rounded-md px-2 animate-slide-in'
	>
		<input placeholder='Escribe tu mensaje aquí...' class="w-full rounded-md p-2 text-black bg-gray-100 focus:outline-none px-4 shadow-sm shadow-white" />
		<button
			type="submit"
			class=`px-4 py-2 text-white rounded-md bg-blue-600 font-bold shadow-sm shadow-blue-400/80 cursor-pointer
			hover:bg-blue-800 hover:shadow-none
			disabled:bg-gray-600 disabled:cursor-not-allowed disabled:shadow-none disabled:text-gray-900/50 disabled:font-medium
			transition-all duration-200
			`
			disabled
		>
			Enviar
		</button>
	</form>

	<small>&nbsp;</small>

	<template id='message-template'>
		<li class='w-full flex flex-col gap-2 rounded-md p-4'>
			<span class="flex justify-center items-center text-lg font-bold rounded-full w-12 h-12"></span>
			<p class="flex justify-center items-center rounded-md py-1.5 px-5"></p>
		</li>
	</template>
</Layout>





<script>
	import { CreateWebWorkerMLCEngine } from "@mlc-ai/web-llm";
	import { addMessage } from '../helpers/index.ts';

	(async() => {
		try {
			const gptClass = ['bg-blue-400', 'self-start'];
			const userClass = [ 'bg-green-400', 'self-end'];

			const $ = (element: string) => document.querySelector(element);

			const $messageTemplate = $('#message-template') as HTMLTemplateElement;
			const $messages = $('ul') as HTMLUListElement;
			const $input = $('input') as HTMLInputElement;
			const $form = $('form') as HTMLFormElement;
			const $sendButton = $('button') as HTMLButtonElement;
			const $info = $('small') as HTMLElement;
			const $i = $('i') as HTMLElement;
			const $loading = $('.loading') as HTMLElement;


			let messages: any[] = [];
			let end = false;

			const SELECTED_MODEL = 'Llama-3.2-1B-Instruct-q4f32_1-MLC';

			console.log(import.meta.url)

			const engine = await CreateWebWorkerMLCEngine(
			  new Worker("src/utils/worker.js", { type: 'module' }),
			  SELECTED_MODEL,
			  {
			    initProgressCallback: (info) => {
					$info.textContent = info.text;
					$i.textContent = info.text;
					console.log(info)
					if (info.progress === 1 && !end) {
						end = true
						$loading?.parentNode?.removeChild($loading)
						$sendButton.removeAttribute('disabled')
						const initialMessage = "¡Hola! Soy un ChatGPT que se ejecuta completamente en tu navegador. ¿En qué puedo ayudarte hoy?";
						addMessage({text: initialMessage, sender: 'bot', $messageTemplate, $messages, gptClass, userClass});
						$input.focus()
					}
			    }
			  }
			)

			$form.addEventListener('submit', async (e) => {
				e.preventDefault();
				const messageText = $input.value;

				if(messageText.length === 0) return;
				$input.value = '';

				addMessage({text: messageText, sender: 'user', $messageTemplate, $messages, gptClass, userClass});

				$sendButton.setAttribute('disabled', '');

				const userMessage = {
					role: 'user',
					content: messageText
				};

				messages.push(userMessage);

				const chunks = await engine.chat.completions.create({
					messages,
					stream: true
				});

				let reply = '';

				const $botMessage = addMessage({text: "", sender: 'bot', $messageTemplate, $messages, gptClass, userClass});

				for await (const chunk of chunks) {
					const choice = chunk.choices[0];
					const content = choice?.delta?.content ?? "";
					reply += content;
					$botMessage.innerHTML += content;
					$messages.scrollTop = $messages.scrollHeight;
				}

				$sendButton.removeAttribute('disabled');

				messages.push({
					role: 'assistant',
					content: reply
				});
			});



			// function addMessage(text: string, sender: string) {
			// 	const clonedTemplate = $messageTemplate.content.cloneNode(true) as HTMLTemplateElement;
			// 	const $newMessage = clonedTemplate.querySelector('li');

			// 	const $who = $newMessage?.querySelector('span') as HTMLSpanElement;
			// 	const $text = $newMessage?.querySelector('p') as HTMLParagraphElement;

			// 	const isBotSender = sender === 'bot';
			// 	const classList =  isBotSender ? [...gptClass] : [...userClass];

			// 	$who.textContent = isBotSender ? 'GPT' : 'Tú';
			// 	$who.classList.add(...classList);
			// 	$text.textContent = text;
			// 	$text.classList.add(...classList);

			// 	$messages.appendChild($newMessage as Node);
			// 	$messages.scrollTop = $messages.scrollHeight;

			// 	return $text;
			// }

		} catch (error) {
			console.error(error);
		}
})();

</script>